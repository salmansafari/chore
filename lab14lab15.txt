# Detailed Steps for Malware Analysis

## A) Analysis of Lab14-01.exe

### 1. Which networking libraries does the malware use, and what are their advantages?

**Steps:**
- Open **Lab14-01.exe** in **PE-bear**:
  - Navigate to the **Imports** tab.
  - Identify imported DLLs, specifically **urlmon.dll** (OLE32 Extensions for Win32).
- Analyze imports from **urlmon.dll**:
  - Note the `URLDownloadToCacheFile` API call, which uses COM objects for downloading files.
- Research advantages of **urlmon.dll**:
  - Simplifies HTTP downloads via high-level COM-based APIs.
  - Handles caching automatically, reducing redundant downloads.
  - Integrates with Windows networking stack, leveraging system proxy settings.
- Confirm dynamically:
  - Run the malware in a VM with **Fakenet-NG**.
  - Verify it beacons to `www.practicalmalwareanalysis.com` using a GET request.
- Document: Library and its benefits.

**Expected Outcome:**
- Library: **urlmon.dll** (`URLDownloadToCacheFile`).
- Advantages: Simplified downloads, caching, proxy support.

---

### 2. What source elements are used to construct the networking beacon, and what conditions would cause the beacon to change?

**Steps:**
- Open **Lab14-01.exe** in **IDA Free** or **IDA Pro**.
- Locate the beacon construction code:
  - Search for references to `www.practicalmalwareanalysis.com` (e.g., in strings or network APIs).
  - Find the subroutine building the beacon string (`ODA6NmU6NmY6NmU6Njk6NjMtSUVVc2Vy`).
- Analyze source elements:
  - Check for system information (e.g., username, MAC address, or system ID) used in the beacon.
  - Look for encoding functions (e.g., Base64) combining these elements.
- Test stability:
  - Run the malware twice in the same VM with Fakenet-NG.
  - Confirm the beacon remains identical (`ODA6NmU6NmY6NmU6Njk6NjMtSUVVc2Vy`).
- Identify change conditions:
  - Modify system parameters (e.g., username, MAC) and rerun.
  - Note if the beacon changes (e.g., due to dynamic system data).
- Document: Sources and change triggers.

**Expected Outcome:**
- Sources: System-specific data (e.g., username, MAC).
- Change conditions: Different system or user environment.

---

### 3. Why might the information embedded in the networking beacon be of interest to the attacker?

**Steps:**
- Decode the beacon (`ODA6NmU6NmY6NmU6Njk6NjMtSUVVc2Vy`):
  - Use a Base64 decoder (adjust for non-standard encoding if needed).
  - Identify embedded data (e.g., username, system ID).
- Analyze purpose:
  - Unique identifiers allow tracking of infected systems.
  - System-specific data enables targeted attacks or profiling.
- Document: Attacker’s interest in the data.

**Expected Outcome:**
- Interest: Unique system/user identification for tracking or targeting.

---

### 4. Does the malware use standard Base64 encoding? If not, how is the encoding unusual?

**Steps:**
- Extract the beacon string (`ODA6NmU6NmY6NmU6Njk6NjMtSUVVc2Vy`).
- Attempt to decode using a standard Base64 decoder:
  - Use an online tool or Python (e.g., `base64.b64decode()`).
  - Note if decoding fails or produces gibberish.
- Analyze the encoding in IDA:
  - Locate the encoding function (likely near `URLDownloadToCacheFile`).
  - Check for a custom Base64 alphabet (e.g., non-standard characters or padding).
  - Compare with standard Base64 (`A-Z, a-z, 0-9, +, /` with `=` padding).
- Document: Differences from standard Base64.

**Expected Outcome:**
- Non-standard Base64 (e.g., custom alphabet or padding).

---

### 5. What is the overall purpose of this malware?

**Steps:**
- Combine findings:
  - Uses **urlmon.dll** to beacon to `www.practicalmalwareanalysis.com`.
  - Sends encoded system data in the beacon.
- Hypothesize:
  - Likely a reconnaissance tool or initial access component.
  - Collects system information for attacker tracking or further attacks.
- Confirm dynamically:
  - Run in a VM with Fakenet-NG; check for additional actions (e.g., downloading payloads).
- Document: The malware’s role.

**Expected Outcome:**
- Reconnaissance, collecting system data for tracking.

---

### 6. What elements of the malware’s communication may be effectively detected using a network signature?

**Steps:**
- Analyze the beacon in Fakenet-NG:
  - Note the URL (`www.practicalmalwareanalysis.com`).
  - Identify static elements (e.g., GET request path, headers).
- Check for consistent patterns:
  - Extract the beacon string pattern (e.g., Base64-like structure).
  - Note any static headers (e.g., User-Agent).
- Develop signatures:
  - Target the domain and beacon format.
- Document: Detectable elements.

**Expected Outcome:**
- Signatures: URL, beacon string pattern, static headers.

---

### 7. What mistakes might analysts make in trying to develop a signature for this malware?

**Steps:**
- Evaluate potential errors:
  - **Overly broad signatures**: Targeting only the domain (`www.practicalmalwareanalysis.com`) may flag legitimate traffic.
  - **Overly specific signatures**: Focusing on dynamic elements (e.g., username, MAC) misses variants.
  - **Misinterpreting encoding**: Assuming standard Base64 or mistaking the beacon for a static file (e.g., `a.png` due to padding).
- Test signatures:
  - Create a broad signature (e.g., all traffic to the domain) and note false positives.
  - Create a specific signature (e.g., User-Agent) and test on a different system.
- Document: Common mistakes.

**Expected Outcome:**
- Mistakes: Broad domain-based signatures, dynamic element focus, misinterpreting encoding.

---

### 8. What set of signatures would detect this malware (and future variants)?

**Steps:**
- Develop regex for the beacon pattern:
  - **Pattern**: `3 characters + "6" (5 times), 3 characters + "t" (1 time), 4+ characters`.
  - Example: `[A-Za-z0-9]{3}6[A-Za-z0-9]{3}6[A-Za-z0-9]{3}6[A-Za-z0-9]{3}6[A-Za-z0-9]{3}6[A-Za-z0-9]{3}t[A-Za-z0-9]{4,}`.
- Include static elements:
  - URL: `www.practicalmalwareanalysis.com`.
  - Request type: GET.
- Test the signature:
  - Use a tool like Snort to simulate detection.
- Document: Regex and static signatures.

**Expected Outcome:**
- Signatures: Regex for beacon, URL, GET request.

---

## B) Analysis of Lab14-02.exe

### 1. What are the advantages or disadvantages of coding malware to use direct IP addresses?

**Steps:**
- Analyze the malware’s network code in **IDA**:
  - Note the hard-coded loopback address (e.g., `127.0.0.1`).
- List advantages for the attacker:
  - **Bypasses DNS blocking**: IPs avoid DNS sinkholing.
  - **Hides domain registration**: No domain needed, reducing traceability.
  - **Blends with legitimate traffic**: IPs may host multiple services, complicating blocking.
- List disadvantages:
  - **Suspicious requests**: Direct IP requests are uncommon and flagged by firewalls.
  - **No domain fronting**: Cannot hide behind CDNs.
  - **Static infrastructure**: IP changes require recompilation, unlike DNS updates.
- Document: Pros and cons.

**Expected Outcome:**
- **Advantages**: Bypasses DNS, hides registration, blends with traffic.
- **Disadvantages**: Suspicious, no fronting, static.

---

### 2. Which networking libraries does this malware use? What are the advantages or disadvantages of using these libraries?

**Steps:**
- Open **Lab14-02.exe** in **CFF Explorer VIII**:
  - Check the **Imports** section for **WinInet.dll**.
  - Note APIs: `InternetCloseHandle`, `InternetOpenUrlA`, `InternetOpenA`, `InternetReadFile`.
- Research advantages of **WinInet.dll**:
  - Granular control over HTTP requests.
  - Supports caching and cookies, improving efficiency.
  - Native Windows integration, leveraging system settings.
- Research disadvantages:
  - Requires manual configuration (e.g., User-Agent).
  - No COM dependency, but more complex than **urlmon.dll**.
- Confirm dynamically:
  - Run in a VM with Fakenet-NG to verify HTTP requests.
- Document: Libraries and pros/cons.

**Expected Outcome:**
- Library: **WinInet.dll** (`InternetCloseHandle`, `InternetOpenUrlA`, `InternetOpenA`, `InternetReadFile`).
- **Advantages**: Granular control, caching, native integration.
- **Disadvantages**: Manual configuration, complexity.

---

### 3. What is the source of the URL that the malware uses for beaconing? What advantages does this source offer?

**Steps:**
- In IDA, locate the beaconing code (e.g., calls to `InternetOpenUrlA`).
- Trace the URL source:
  - Check for a hard-coded string (e.g., `127.0.0.1` or an external IP in real variants).
  - Look for dynamic construction (e.g., combining IP with a path).
- Analyze advantages:
  - Hard-coded IPs ensure reliable C2 contact without DNS.
  - Avoids domain takedowns or sinkholing.
- Confirm dynamically:
  - Run with Fakenet-NG to capture the URL.
- Document: Source and benefits.

**Expected Outcome:**
- Source: Hard-coded IP (loopback or external).
- Advantages: Reliable, avoids DNS issues.

---

### 4. Which aspect of the HTTP protocol does the malware leverage to achieve its objectives?

**Steps:**
- Analyze the beacon in Fakenet-NG:
  - Note the HTTP method (e.g., GET or POST).
  - Check headers (e.g., User-Agent for data exfiltration).
- In IDA, find the HTTP request construction:
  - Look for data embedded in headers or body.
- Hypothesize:
  - Likely uses HTTP POST or headers to send encoded data.
- Document: HTTP feature used.

**Expected Outcome:**
- Leverages HTTP headers or body for data exfiltration.

---

### 5. What kind of information is communicated in the malware’s initial beacon?

**Steps:**
- Run the malware with Fakenet-NG:
  - Capture the beacon data.
- Decode the beacon:
  - Note it’s Base64-encoded (non-standard index).
  - Decode to reveal `cmd.exe` output (e.g., command results).
- Confirm in IDA:
  - Locate `sub_4015C0` and `sub_401800` for encoding logic.
- Document: Beacon content.

**Expected Outcome:**
- Information: `cmd.exe` output (Base64-encoded).

---

### 6. What are some disadvantages in the design of this malware’s communication channels?

**Steps:**
- Analyze `sub_4015C0` and `sub_401800` in IDA:
  - Note reliance on a single IP (loopback or static).
  - Check for encryption or obfuscation (Base64 only).
- List disadvantages:
  - Static IP is easily blocked.
  - Non-standard Base64 is detectable by IDS.
  - No fallback if C2 is down.
- Confirm dynamically:
  - Test blocking the IP in Fakenet-NG; note malware failure.
- Document: Design flaws.

**Expected Outcome:**
- Disadvantages: Static IP, detectable encoding, no fallback.

---

### 7. Is the malware’s encoding scheme standard?

**Steps:**
- Extract the beacon from Fakenet-NG.
- Attempt standard Base64 decoding:
  - Use Python or an online tool; note if it fails.
- Analyze `sub_4015C0` in IDA:
  - Confirm Base64 with a custom index string.
- Document: Encoding type.

**Expected Outcome:**
- Non-standard Base64 (custom index string).

---

### 8. How is communication terminated?

**Steps:**
- In IDA, analyze `sub_4015C0`:
  - After `sub_401800` (connection), find a comparison for `exit`.
- Trace the logic:
  - Note the malware closes the connection if `exit` is received.
- Confirm dynamically:
  - Simulate a C2 response with `exit` in Fakenet-NG.
- Document: Termination condition.

**Expected Outcome:**
- Terminates when C2 sends `exit`.

---

### 9. What is the purpose of this malware, and what role might it play in the attacker’s arsenal?

**Steps:**
- Combine findings:
  - Establishes a reverse TCP shell via `cmd.exe`.
  - Uses Base64 to evade detection.
  - Deletes itself after execution.
- Hypothesize:
  - Likely an initial access tool for executing commands.
  - Self-deletion suggests temporary use during compromise.
- Document: Purpose and role.

**Expected Outcome:**
- Purpose: Reverse TCP command shell.
- Role: Initial access tool.

---

## C) Analysis of Lab14-03.exe

### 1. What hard-coded elements are used in the initial beacon? What elements, if any, would make a good signature?

**Steps:**
- Run **Lab14-03.exe** with Fakenet-NG:
  - Capture the initial beacon to `www.practicalmalwareanalysis.com`.
- In IDA, locate the beacon construction:
  - Find hard-coded elements (e.g., domain, headers).
- Analyze headers:
  - Note `Accept-Language`, `UA-CPU`, `User-Agent`, `Accept`, `Accept-Encoding`.
- Evaluate for signatures:
  - Static headers and domain are consistent.
- Document: Hard-coded elements and signature candidates.

**Expected Outcome:**
- Elements: Domain, headers (`Accept-Language`, `UA-CPU`, `User-Agent`, `Accept`, `Accept-Encoding`).
- Signatures: Headers, domain.

---

### 2. What elements of the initial beacon may not be conducive to a long-lasting signature?

**Steps:**
- Analyze the beacon in IDA:
  - Check for dynamic elements (e.g., timestamps, system data).
- Test variability:
  - Run the malware on different systems; note changes in headers or payload.
- Identify non-static elements:
  - User-Agent may include system-specific data.
  - Domain could change in variants.
- Document: Non-durable elements.

**Expected Outcome:**
- Non-lasting: Dynamic User-Agent, mutable domain.

---

### 3. How does the malware obtain commands? What example from the chapter used a similar methodology? What are the advantages of this technique?

**Steps:**
- In IDA, locate the command retrieval code (e.g., `sub_401457`).
- Analyze the logic:
  - Note it fetches data from `www.practicalmalwareanalysis.com`.
  - Commands are embedded in HTTP responses (e.g., within `<noscript>` tags).
- Compare with chapter examples:
  - Likely similar to a web-based C2 (e.g., Lab14-01 or 14-02).
- List advantages:
  - Hides commands in legitimate-looking traffic.
  - Leverages existing web infrastructure.
- Document: Method, example, benefits.

**Expected Outcome:**
- Method: Web-based C2 via `<noscript>`.
- Example: Similar to Lab14-01/14-02.
- Advantages: Stealth, infrastructure reuse.

---

### 4. When the malware receives input, what checks are performed on the input to determine whether it is a valid command? How does the attacker hide the list of commands the malware is searching for?

**Steps:**
- In IDA, analyze `sub_401684` (command parsing):
  - Note it tokenizes the URL using `strtok`.
  - Checks for `<noscript>`, the domain, a command, and the number `96`.
  - Verifies the command starts with `d`.
- Search for the command list:
  - Look for a hardcoded list or obfuscated data (e.g., encrypted or encoded).
- Hypothesize hiding method:
  - Commands may be embedded in the C2 response or dynamically generated.
- Document: Checks and hiding method.

**Expected Outcome:**
- Checks: `<noscript>`, domain, command with `d`, `96`.
- Hiding: Commands in C2 response or obfuscated.

---

### 5. What type of encoding is used for command arguments? How is it different from Base64, and what advantages or disadvantages does it offer?

**Steps:**
- Analyze `sub_401684` for encoding:
  - Note the encoding applied to command arguments.
- Compare with Base64:
  - Check for a custom alphabet or structure.
- List advantages:
  - Custom encoding evades standard decoders.
- List disadvantages:
  - Detectable by pattern analysis.
- Document: Encoding type and comparison.

**Expected Outcome:**
- Encoding: Custom (non-Base64).
- Differences: Unique alphabet.
- **Advantages**: Evasion.
- **Disadvantages**: Detectable patterns.

---

### 6. What commands are available to this malware?

**Steps:**
- In IDA, trace command parsing in `sub_401684`:
  - Look for comparisons or switches handling commands (e.g., starting with `d`).
- Run dynamically:
  - Simulate C2 responses with Fakenet-NG to test commands.
- Document: List of commands (e.g., download, execute).

**Expected Outcome:**
- Commands: To be determined (e.g., download, execute).

---

### 7. What is the purpose of this malware?

**Steps:**
- Combine findings:
  - Uses web-based C2 for commands.
  - Supports multiple commands with persistence.
- Hypothesize:
  - Acts as a dropper for additional malware or C2 payloads.
- Confirm dynamically:
  - Check for persistence (e.g., registry, files) and payload downloads.
- Document: Purpose as a dropper.

**Expected Outcome:**
- Purpose: Malware dropper for persistent C2 payloads.

---

### 8. What are some distinct areas of code or configuration data that can be targeted by network signatures?

**Steps:**
- Identify key areas in IDA:
  - Beacon construction (hard-coded headers, domain).
  - Command parsing (`sub_401684`, `<noscript>`).
  - Encoding logic (custom encoding).
- List signature targets:
  - Static headers (`Accept-Language`, `User-Agent`).
  - Domain and `<noscript>` tag.
  - Encoded command patterns.
- Document: Target areas.

**Expected Outcome:**
- Targets: Headers, domain, `<noscript>`, encoding.

---

### 9. What set of signatures should be used for this malware?

**Steps:**
- Develop signatures:
  - **Headers**: `Accept-Language`, `UA-CPU`, `User-Agent`, `Accept`, `Accept-Encoding`.
  - **Domain**: `www.practicalmalwareanalysis.com`.
  - **C2 Path**: `autobat.exe`.
  - **Command Marker**: `<noscript>` tag.
- Create Snort rules:
  - Example: `alert tcp any any -> any 80 (content:"www.practicalmalwareanalysis.com"; content:"<noscript>"; sid:1000001;)`.
- Test signatures:
  - Use Fakenet-NG to simulate traffic.
- Document: Signature set.

**Expected Outcome:**
- Signatures: Headers, domain, `autobat.exe`, `<noscript>`.

---

## D) Analysis of Lab15-01.exe

### 1. What anti-disassembly technique is used in this binary?

**Steps:**
- Open **Lab15-01.exe** in **IDA Free**.
- Note the disassembly:
  - Observe text-like data and calls to non-existent functions.
- Analyze the technique:
  - Identify misaligned instructions causing incorrect disassembly.
  - Likely uses junk bytes or fake calls to confuse IDA.
- Document: The anti-disassembly method.

**Expected Outcome:**
- Technique: Junk bytes or fake calls.

---

### 2. What rogue opcode is the disassembly tricked into disassembling?

**Steps:**
- In IDA, examine the problematic code (e.g., at `0x00401010`).
- Identify the rogue opcode:
  - Note `0xE8` (call instruction), which misaligns the disassembler.
  - The 5-byte call hides subsequent bytes.
- Confirm by switching to hex view:
  - Check bytes after `0xE8` for hidden instructions.
- Document: The opcode.

**Expected Outcome:**
- Rogue opcode: `0xE8` (call).

---

### 3. How many times is this technique used?

**Steps:**
- In IDA, search for `0xE8` opcodes:
  - Use `Alt+B`, enter `E8`, and count occurrences.
- Manually inspect each:
  - Convert suspect instructions to data (`D`) at `0x00401010` and others.
  - Reassemble to reveal hidden code.
- Count instances (provided as **5**).
- Document: Number of uses.

**Expected Outcome:**
- Used **5 times**.

---

### 4. What command-line argument will cause the program to print “Good Job!”?

**Steps:**
- Fix anti-disassembly:
  - At each `0xE8`, convert to data (`D`) and redefine as code (`C`).
- Locate the argument check:
  - Find `main` and the string comparison for the argument.
  - Note the expected string (e.g., a secret code).
- Test dynamically:
  - Run with the guessed argument (e.g., `Lab15-01.exe <code>`).
  - Verify “Good Job!” output.
- Document: The argument.

**Expected Outcome:**
- Argument: To be determined (secret code).

---

## E) Analysis of Lab15-02.exe

### 1. What URL is initially requested by the program?

**Steps:**
- Fix anti-disassembly in IDA:
  - Identify and correct rogue `0xE8` opcodes (similar to Lab15-01).
- Locate network code:
  - Search for `InternetOpenUrl` or strings like `http://`.
- Extract the URL:
  - Note the initial request (e.g., to `www.practicalmalwareanalysis.com`).
- Confirm dynamically:
  - Run with Fakenet-NG; capture the URL.
- Document: The URL.

**Expected Outcome:**
- URL: `www.practicalmalwareanalysis.com`.

---

### 2. How is the User-Agent generated?

**Steps:**
- In IDA, find the `InternetOpen` call:
  - Trace the User-Agent parameter.
- Analyze construction:
  - Check for dynamic elements (e.g., system info, random strings).
  - Note any hardcoded prefix or format.
- Confirm dynamically:
  - Run multiple times with Fakenet-NG; note User-Agent variations.
- Document: Generation method.

**Expected Outcome:**
- User-Agent: Dynamically generated (e.g., system-based).

---

### 3. What does the program look for in the page it initially requests?

**Steps:**
- In IDA, locate the page parsing code:
  - After `InternetReadFile`, find a string search for `Bamboo:`.
- Analyze the logic:
  - Note it extracts data following `Bamboo:`.
- Confirm dynamically:
  - Simulate a response with Fakenet-NG containing `Bamboo:`.
- Document: Search target.

**Expected Outcome:**
- Looks for `Bamboo:` in the response.

---

### 4. What does the program do with the information it extracts from the page?

**Steps:**
- In IDA, trace the code after `Bamboo:` extraction:
  - Check for decoding, execution, or storage of the data.
- Hypothesize:
  - Likely uses the data as a command or payload URL.
- Confirm dynamically:
  - Simulate a response and monitor actions (e.g., new requests, file drops).
- Document: Data usage.

**Expected Outcome:**
- Uses `Bamboo:` data for commands or further requests.

---

## F) Analysis of Lab15-03.exe

### 1. How is the malicious code initially called?

**Steps:**
- Open **Lab15-03.exe** in IDA:
  - Note it appears legitimate (e.g., a process-listing tool).
- Locate hidden code:
  - Search for network APIs or suspicious subroutines.
- Run with Fakenet-NG:
  - Observe process listing, followed by an outbound connection.
- In OllyDbg, set breakpoints:
  - Step through to find the malicious call (e.g., after process listing).
- Document: Call trigger.

**Expected Outcome:**
- Malicious code called after legitimate process listing.

---

### 2. What does the malicious code do?

**Steps:**
- In IDA, analyze the network code:
  - Find the outbound connection (e.g., to a C2 server).
- Check actions:
  - Look for command execution, data exfiltration, or payload downloads.
- Confirm dynamically:
  - Run with Fakenet-NG; capture traffic and system changes.
- Document: Malicious behavior.

**Expected Outcome:**
- Sends system data to a C2 server or downloads payloads.
